name: Build and Deploy OnelensDeployer and Package Onelens-Agent Helm Chart

permissions:
  id-token: write
  contents: write

on:
  workflow_run:
    workflows: ["Update Helm Chart Versions"]
    types:
      - completed
      
  # push:
  #   branches:
  #     - master
  #   paths:
  #     - 'Dockerfile'
  #     - 'entrypoint.sh'
  #     - 'charts/onelensdeployer/**'
  #     - 'charts/onelens-agent/**'

  # pull_request:
  #   branches:
  #     - master
  #   paths:
  #     - 'Dockerfile'
  #     - 'entrypoint.sh'
  #     - 'charts/onelensdeployer/**'
  #     - 'charts/onelens-agent/**'

      
  workflow_dispatch:
    inputs:
      skip_vulnerability_check:
        description: 'Skip vulnerability check and push image anyway'
        required: false
        default: false
        type: boolean

jobs:
  validate-branch:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if branch is master (only for manual trigger)
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
  
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.ref }}" != "refs/heads/master" ]]; then
              echo " This workflow can only be manually triggered on the 'master' branch."
              exit 1
            else
              echo " Manual trigger on master allowed."
            fi
          else
            echo " Not a manual trigger, skipping branch validation."
          fi

  get-image-version:
    needs: [validate-branch]
    if: github.event_name != 'workflow_dispatch' || needs.validate-branch.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.chart_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Extract Chart Version for Image Tag
        id: chart_version
        run: |
          VERSION=$(yq e '.version' charts/onelensdeployer/Chart.yaml)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Image version: v$VERSION"

  build-docker:
    needs: [get-image-version]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: us-east-1
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build Docker Image for Scanning (single platform)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.get-image-version.outputs.image_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Save Docker image
        run: docker save public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.get-image-version.outputs.image_version }} -o /tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar

  trivy-scan:
    name: Trivy Security Scan
    needs: [build-docker, get-image-version]
    if: inputs.skip_vulnerability_check != true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      vulnerabilities_found: ${{ steps.scan.outputs.vulnerabilities_found }}
      scan_results: ${{ steps.scan.outputs.scan_results }}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/image.tar

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan on Docker Image
        id: scan
        run: |
          IMAGE="public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.get-image-version.outputs.image_version }}"
          echo "Scanning image $IMAGE with Trivy"
          
          # Run trivy scan and capture output
          trivy image --severity CRITICAL,HIGH --no-progress --format json $IMAGE > trivy-results.json
          
          # Check if vulnerabilities were found
          VULN_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities // []] | add | length')
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
            echo "Found $VULN_COUNT critical/high vulnerabilities"
            
            # Generate human-readable summary
            trivy image --severity CRITICAL,HIGH --no-progress $IMAGE > trivy-summary.txt
            
            # Create scan results summary
            echo "scan_results<<EOF" >> $GITHUB_OUTPUT
            echo " **Security Vulnerabilities Found: $VULN_COUNT**" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "Critical and High severity vulnerabilities detected in the Docker image." >> $GITHUB_OUTPUT
            echo "Please review the full scan results below:" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            cat trivy-summary.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Fail the job if vulnerabilities are found
            echo " Failing build due to security vulnerabilities"
            exit 1
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "scan_results= No critical or high severity vulnerabilities found!" >> $GITHUB_OUTPUT
            echo " No critical/high vulnerabilities found. Image is safe to push."
          fi

      - name: Upload Trivy results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-results.json
            trivy-summary.txt

  push-docker:
    name: Push Docker Image
    needs: [build-docker, trivy-scan, get-image-version]
    if: |
      always() && 
      needs.build-docker.result == 'success' &&
      (needs.trivy-scan.result == 'success' || 
       needs.trivy-scan.result == 'skipped' || 
       inputs.skip_vulnerability_check == true)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: us-east-1
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Push Multi-Arch Docker Image
        run: |
          IMAGE_WITH_VERSION="public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.get-image-version.outputs.image_version }}"
          echo "Building and pushing multi-arch images: $IMAGE_WITH_VERSION and $IMAGE_LATEST"
          
          # Build and push the multi-platform image with version tag and latest tag
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMAGE_WITH_VERSION \
            --push \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .
          
          if [ "${{ inputs.skip_vulnerability_check }}" == "true" ]; then
            echo " Multi-arch image pushed with vulnerability check skipped"
          elif [ "${{ needs.trivy-scan.result }}" == "skipped" ]; then
            echo " Multi-arch image pushed with vulnerability check skipped"
          else
            echo " Clean multi-arch image pushed successfully"
          fi

  package_and_push_helm:
    needs: [validate-branch]
    if: github.event_name != 'workflow_dispatch' || needs.validate-branch.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: us-east-1
          role-session-name: GitHubActionsSession

      - name: Authenticate Helm with AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin 609916866699.dkr.ecr.us-east-1.amazonaws.com

      - name: Prepare chart packaging
        working-directory: charts/onelensdeployer
        run: |
          echo "Updating Helm dependencies"
          helm dependency update
          echo "Packaging Helm chart"
          helm package .
          pwd

      - name: Commit and push packaged chart to root
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pwd
          
          ls /home/runner/work/onelens-installation-scripts/onelens-installation-scripts/charts/onelensdeployer/onelensdeployer-*.tgz
          
          mv /home/runner/work/onelens-installation-scripts/onelens-installation-scripts/charts/onelensdeployer/onelensdeployer-*.tgz /home/runner/work/onelens-installation-scripts/onelens-installation-scripts/
          
          ls /home/runner/work/onelens-installation-scripts/onelens-installation-scripts/
          
          
          ls /home/runner/work/onelens-installation-scripts/onelens-installation-scripts/onelensdeployer-*.tgz
          
          pwd
          echo "🗂️ Updating Helm repo index"
          helm repo index . --url https://astuto-ai.github.io/onelens-installation-scripts/

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add onelensdeployer-*.tgz index.yaml
          git commit -m "Add packaged Helm chart and update index" || echo "Nothing to commit"
          git push --force https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:master

      - name: Extract packaged Helm chart version
        run: |
          VERSION=$(yq e '.version' charts/onelensdeployer/Chart.yaml)
          echo "$VERSION" > helm-package-version.txt
          echo "Packaged Helm chart version: $VERSION"

      - name: Upload Helm package version artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package-version
          path: helm-package-version.txt

# Package Onelens-Agent Helm Chart

  validate-and-package:
    needs: [validate-branch]
    if: (github.event_name != 'workflow_dispatch') || needs.validate-branch.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous commits

      - name: Install yq for YAML manipulation
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: ap-south-1
          role-session-name: GitHubActionsSession

      - name: Authenticate Helm with AWS ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | helm registry login --username AWS --password-stdin 609916866699.dkr.ecr.ap-south-1.amazonaws.com

      - name: Prepare chart packaging
        working-directory: charts/onelens-agent
        run: |
          echo " Updating Helm dependencies"
          helm dependency update
          echo " Packaging Helm chart"
          helm package .
          pwd
      - name: Commit and push packaged chart to root
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pwd
          # Move the .tgz Helm package to the repo root
          mv charts/onelens-agent/onelens-agent-*.tgz .
          echo " Updating Helm repo index"
          helm repo index . --url https://astuto-ai.github.io/onelens-installation-scripts/
          
          # Set GitHub Actions bot as the commit author
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Stage and commit the package
          git add onelens-agent-*.tgz index.yaml
          git commit -m "Add packaged Helm chart and update index" || echo "Nothing to commit"
          
          # Force push to overwrite any conflicts (use with caution)
          git push --force https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:master

      - name: Extract packaged Helm chart version
        run: |
          VERSION=$(yq e '.version' charts/onelensdeployer/Chart.yaml)
          echo "$VERSION" > helm-package-version.txt
          echo "Packaged Helm chart version: $VERSION"

      - name: Upload Helm package version artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package-version-agent
          path: helm-package-version.txt

# Validating helm charts

  validate_helm_chart:
    needs:
      - package_and_push_helm
      - validate-and-package
    if: |
      (github.event_name != 'workflow_dispatch') || needs.validate-branch.result == 'success'
      &&
      (needs.package_and_push_helm.result == 'success' || 
       needs.validate-and-package.result == 'success')
       
    runs-on: ubuntu-latest

    steps:
      - name: Download Helm package version artifact from previous job
        uses: actions/download-artifact@v4
        with:
          name: helm-package-version
        continue-on-error: true  # In case artifact not present

      - name: Check if new Helm package version exists
        id: check_version
        run: |
          if [ ! -f "helm-package-version.txt" ]; then
            echo "No helm-package-version artifact found. Skipping validation."
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          NEW_VERSION=$(cat helm-package-version.txt)
          echo "Downloaded Helm package version: $NEW_VERSION"

          if [ -f "last_validated_version.txt" ]; then
            LAST_VERSION=$(cat last_validated_version.txt)
            echo "Last validated Helm package version: $LAST_VERSION"
          else
            echo "No last validated version record found."
            LAST_VERSION=""
          fi

          if [ "$NEW_VERSION" = "$LAST_VERSION" ]; then
            echo "Helm package version unchanged. Skipping validation."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "New Helm package version detected. Proceeding with validation."
            echo "$NEW_VERSION" > last_validated_version.txt
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no new package
        if: steps.check_version.outputs.proceed != 'true'
        run: |
          echo "No new Helm package to validate. Exiting."
          exit 0
          
      - name: Set up Helm
        if: steps.check_version.outputs.proceed == 'true'
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Wait for GitHub Pages sync
        if: steps.check_version.outputs.proceed == 'true'
        run: sleep 120  # Optional buffer for GH Pages update

      - name: Add Helm Repo
        if: steps.check_version.outputs.proceed == 'true'
        run: |
          helm repo add astuto https://astuto-ai.github.io/onelens-installation-scripts/
          helm repo update

      - name: Validate onelensdeployer Chart (if present)
        if: steps.check_version.outputs.proceed == 'true'
        run: |
          CHART_NAME="onelensdeployer"
          if helm search repo astuto/$CHART_NAME --versions -o json | jq -e '.[0]' >/dev/null; then
            VERSION=$(helm search repo astuto/$CHART_NAME --versions -o json | jq -r '.[0].version')
            echo " Validating $CHART_NAME version: $VERSION"
            helm pull astuto/$CHART_NAME --version "$VERSION" --untar || { echo " Failed to pull chart."; exit 1; }
            helm lint $CHART_NAME || echo " Helm lint warnings/errors found in $CHART_NAME"
          else
            echo " $CHART_NAME not found in Helm repo. Skipping."
          fi

      - name: Validate onelens-agent Chart (if present)
        if: steps.check_version.outputs.proceed == 'true'
        run: |
          CHART_NAME="onelens-agent"
          if helm search repo astuto/$CHART_NAME --devel --versions -o json | jq -e '.[0]' >/dev/null; then
            VERSION=$(helm search repo astuto/$CHART_NAME --devel --versions -o json | jq -r '.[0].version')
            echo " Validating $CHART_NAME version: $VERSION"
            [ -d "$CHART_NAME" ] && rm -rf "$CHART_NAME"
            helm pull astuto/$CHART_NAME --version "$VERSION" --untar || { echo " Failed to pull chart."; exit 1; }
            helm lint "$CHART_NAME" || echo " Helm lint warnings/errors found in $CHART_NAME"
          else
            echo " $CHART_NAME not found in Helm repo. Skipping."
          fi
