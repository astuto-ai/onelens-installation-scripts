name: Build OneLens Deployer Docker Image

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Determine image tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "Using manual tag: $TAG"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            echo "Using git tag: $TAG"
          else
            TAG="latest"
            echo "Using default tag: $TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-for-scan:
    needs: [determine-tag]
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.build.outputs.image_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: us-east-1
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build Docker Image for Scanning (single platform)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.determine-tag.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Save Docker image for scanning
        run: |
          docker save public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.determine-tag.outputs.image_tag }} -o /tmp/image.tar
          echo "image_exists=true" >> $GITHUB_OUTPUT

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ needs.determine-tag.outputs.image_tag }}
          path: /tmp/image.tar

  security-scan:
    name: Trivy Security Scan
    needs: [build-for-scan, determine-tag]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.determine-tag.outputs.image_tag }}
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: 'public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.determine-tag.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail here, let table format handle the failure

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table output - blocking)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: 'public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.determine-tag.outputs.image_tag }}'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # This will fail the job if vulnerabilities are found

  build-and-push:
    name: Build and Push Multi-Arch Docker Image
    needs: [security-scan, determine-tag]
    if: needs.security-scan.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: us-east-1
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            public.ecr.aws/w7k6q5m9/onelens-deployer:${{ needs.determine-tag.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image build summary
        run: |
          echo "Successfully built and pushed Docker image"
          echo "Tag: ${{ needs.determine-tag.outputs.image_tag }}"
          echo "Registry: public.ecr.aws/w7k6q5m9/onelens-deployer"
          echo "Platforms: linux/amd64, linux/arm64"
          echo "Security: Passed Trivy scan"
          echo "Event: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual Build: ${{ github.event.inputs.tag }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "Tag Build: ${GITHUB_REF#refs/tags/}"
          else
            echo "Latest Build from master"
          fi
