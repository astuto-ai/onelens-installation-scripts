name: Package Onelens-Agent Helm Chart

permissions:
  id-token: write
  contents: write

on:
  push:
    branches:
      - wait
  workflow_dispatch:

jobs:
  validate-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous commits

      - name: Install yq for YAML manipulation
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Check for version changes
        id: version_check
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          VERSION_FILE="charts/onelens-agent/version.md"
          LOCK_FILE="charts/onelens-agent/Chart.lock"
          
          # Get the previous commit
          PREV_COMMIT=$(git rev-parse HEAD^)
          
          # Check if any of the files changed
          CHART_CHANGED=false
          VERSION_CHANGED=false
          LOCK_CHANGED=false
          
          if ! git diff --quiet "$PREV_COMMIT" -- "$CHART_FILE"; then
            CHART_CHANGED=true
            echo "Chart.yaml has changes"
          fi
          
          if ! git diff --quiet "$PREV_COMMIT" -- "$VERSION_FILE"; then
            VERSION_CHANGED=true
            echo "version.md has changes"
          fi
          
          if ! git diff --quiet "$PREV_COMMIT" -- "$LOCK_FILE"; then
            LOCK_CHANGED=true
            echo "Chart.lock has changes"
          fi
          
          # If no files changed, skip remaining steps
          if [ "$CHART_CHANGED" = false ] && [ "$VERSION_CHANGED" = false ] && [ "$LOCK_CHANGED" = false ]; then
            echo "No changes detected in Chart.yaml, version.md, or Chart.lock"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changes detected - proceeding with validation and packaging"
          echo "should_skip=false" >> $GITHUB_OUTPUT

      - name: Early exit if no changes
        if: steps.version_check.outputs.should_skip == 'true'
        run: |
          echo "‚úÖ No version changes detected. Skipping packaging and publishing steps."
          exit 0

      - name: Check if dependency version changed but chart version not updated
        if: steps.version_check.outputs.should_skip == 'false'
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          
          # Get the previous commit
          PREV_COMMIT=$(git rev-parse HEAD^)
          
          # Extract current and previous values
          OLD_DEP_VERSIONS=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.dependencies[].version')
          NEW_DEP_VERSIONS=$(cat "$CHART_FILE" | yq '.dependencies[].version')
          OLD_CHART_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.version')
          NEW_CHART_VERSION=$(cat "$CHART_FILE" | yq '.version')
          OLD_APP_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.appVersion')
          NEW_APP_VERSION=$(cat "$CHART_FILE" | yq '.appVersion')
          
          if [ "$OLD_DEP_VERSIONS" != "$NEW_DEP_VERSIONS" ]; then
            echo "‚ö†Ô∏è Detected a change in dependency versions."
            if [ "$OLD_CHART_VERSION" = "$NEW_CHART_VERSION" ] || [ "$OLD_APP_VERSION" = "$NEW_APP_VERSION" ]; then
              echo "‚ùå Dependency version changed, but version or appVersion not updated."
              echo "Old Chart version: $OLD_CHART_VERSION"
              echo "New Chart version: $NEW_CHART_VERSION"
              echo "Old App version: $OLD_APP_VERSION"
              echo "New App version: $NEW_APP_VERSION"
              exit 1
            fi
          fi

      - name: Check if chart version is documented in version.md
        if: steps.version_check.outputs.should_skip == 'false'
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          VERSION_FILE="charts/onelens-agent/version.md"
          
          PREV_COMMIT=$(git rev-parse HEAD^)
          OLD_CHART_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.version')
          NEW_CHART_VERSION=$(cat "$CHART_FILE" | yq '.version')
          
          if [ "$OLD_CHART_VERSION" != "$NEW_CHART_VERSION" ]; then
            echo "üßê Chart version changed from $OLD_CHART_VERSION to $NEW_CHART_VERSION"
            if ! grep -q "$NEW_CHART_VERSION" "$VERSION_FILE"; then
              echo "‚ùå Chart version updated to $NEW_CHART_VERSION, but version.md does not contain it."
              exit 1
            else
              echo "‚úÖ version.md contains the updated Chart version $NEW_CHART_VERSION"
            fi
          fi

      - name: Check Chart.lock matches Chart.yaml dependencies
        if: steps.version_check.outputs.should_skip == 'false'
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          LOCK_FILE="charts/onelens-agent/Chart.lock"
      
          echo "üì¶ Chart.yaml Dependencies:"
          yq e -o=json "$CHART_FILE" | jq -r '.dependencies[] | "\(.name): \(.version)"' | sort > chart_yaml_deps.txt
          cat chart_yaml_deps.txt

          echo "üîí Chart.lock Dependencies:"
          yq e -o=json "$LOCK_FILE" | jq -r '.dependencies[] | "\(.name): \(.version)"' | sort > chart_lock_deps.txt
          cat chart_lock_deps.txt

          echo ""
          echo "üîç Comparing Chart.yaml and Chart.lock dependency versions..."

          MISMATCH=0
          while read -r line; do
            NAME=$(echo "$line" | cut -d':' -f1)
            VERSION_YAML=$(echo "$line" | cut -d':' -f2 | tr -d ' ')
            VERSION_LOCK=$(grep "^$NAME:" chart_lock_deps.txt | cut -d':' -f2 | tr -d ' ')
            if [ -z "$VERSION_LOCK" ]; then
              VERSION_LOCK="MISSING"
            fi

            if [ "$VERSION_YAML" != "$VERSION_LOCK" ]; then
              echo "‚ùå Version mismatch for dependency '$NAME': Chart.yaml has '$VERSION_YAML', Chart.lock has '$VERSION_LOCK'"
              MISMATCH=1
            fi
          done < chart_yaml_deps.txt

          if [ "$MISMATCH" -eq 1 ]; then
            echo ""
            echo "üí° Run: helm dependency update charts/onelens-agent"
            exit 1
          else
            echo "‚úÖ All dependency versions match between Chart.yaml and Chart.lock"
          fi

      - name: All checks passed
        if: steps.version_check.outputs.should_skip == 'false'
        run: echo "‚úÖ All checks passed. Proceeding with packaging steps."

      - name: Clone onelens-installation-scripts repo
        if: steps.version_check.outputs.should_skip == 'false'
        run: |
          git clone https://github.com/astuto-ai/onelens-installation-scripts.git
          
      - name: Configure AWS Credentials
        if: steps.version_check.outputs.should_skip == 'false'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::609916866699:role/onelens-agent-github-actions-ecr-role
          aws-region: ap-south-1
          role-session-name: GitHubActionsSession

      - name: Authenticate Helm with AWS ECR
        if: steps.version_check.outputs.should_skip == 'false'
        run: |
          aws ecr get-login-password --region ap-south-1 | helm registry login --username AWS --password-stdin 609916866699.dkr.ecr.ap-south-1.amazonaws.com

      - name: Prepare chart packaging
        if: steps.version_check.outputs.should_skip == 'false'
        working-directory: charts/onelens-agent
        run: |
          echo "üì• Updating Helm dependencies"
          helm dependency update
          echo "üì¶ Packaging Helm chart"
          helm package .

      - name: Commit and push packaged chart to root
        if: steps.version_check.outputs.should_skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Move the .tgz Helm package to the repo root
          mv charts/onelens-agent/onelens-agent-*.tgz .
          echo "üóÇÔ∏è Updating Helm repo index"
          helm repo index . --url https://astuto-ai.github.io/onelens-installation-scripts/
          
          # Set GitHub Actions bot as the commit author
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Stage and commit the package
          git add onelens-agent-*.tgz index.yaml
          git commit -m "Add packaged Helm chart and update index" || echo "Nothing to commit"
          
          # Force push to overwrite any conflicts (use with caution)
          git push --force https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:onelens-workflow
