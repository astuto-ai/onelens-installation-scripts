job:
  enabled: true
  name: onelensdeployerjob
  image: public.ecr.aws/w7k6q5m9/onelens-deployer
  imagePullPolicy: Always
  restartPolicy: Never
  env: 
    deployment_type: job
  # Tolerations allow the agent to be scheduled on nodes with matching taints
  tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"
  nodeSelector: {}
    # kubernetes.io/os: linux
  serviceAccount:
    enabled: true
    name: onelensdeployerjob-sa

  clusterRole:
    name: onelensdeployerjob-clusterrole
    rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"] 

  clusterRoleBinding:
    name: onelensdeployerjob-clusterrolebinding
cronjob:
  enabled: true
  name: onelensdeployercronjob
  schedule: "0 2 * * *"
  image: public.ecr.aws/w7k6q5m9/onelens-deployer
  restartPolicy: Never
  env: 
    deployment_type: cronjob
  concurrencyPolicy: "Forbid"  # Prevent concurrent job executions
  successfulJobsHistoryLimit: 1 # Number of successful jobs to keep
  failedJobsHistoryLimit: 1 # Number of failed jobs to keep
  suspend: false # Suspend the job
  healthCheck: false  # Set to true to enable health check for cronjob pod

  # Tolerations allow the agent to be scheduled on nodes with matching taints
  tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"
  nodeSelector: {}
    # kubernetes.io/os: linux

  serviceAccount:
    enabled: true
    name: onelensdeployercronjob-sa

  clusterRole:
    name: onelensdeployercronjob-clusterrole
    rules:
    # Read access needed to inspect current deployments and resources
    - apiGroups: ["", "apps", "autoscaling", "batch", "extensions", "policy", "rbac.authorization.k8s.io", "networking.k8s.io"]
      resources: ["deployments", "replicasets", "pods", "services", "configmaps", "secrets", "persistentvolumeclaims", "statefulsets", "horizontalpodautoscalers", "ingresses", "networkpolicies", "roles", "rolebindings", "serviceaccounts", "daemonsets", "jobs", "cronjobs"]
      verbs: ["get", "list", "watch"]

    # Write access to perform patching and upgrades
    - apiGroups: ["", "apps", "autoscaling", "batch", "extensions", "policy", "rbac.authorization.k8s.io", "networking.k8s.io"]
      resources: ["deployments", "replicasets", "pods", "services", "configmaps", "secrets", "persistentvolumeclaims", "statefulsets", "horizontalpodautoscalers", "ingresses", "networkpolicies", "roles", "rolebindings", "serviceaccounts", "daemonsets", "jobs", "cronjobs"]
      verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

    # Namespace discovery
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "list", "watch"]

    # CRD management
    - apiGroups: ["apiextensions.k8s.io"]
      resources: ["customresourcedefinitions"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  clusterRoleBinding:
    name: onelensdeployercronjob-clusterrolebinding