onelens-agent:
  enabled: true
  image:
    repository: public.ecr.aws/w7k6q5m9/onelens-agent
    tag: v1.5.0
    pullPolicy: IfNotPresent
  nameOverride: "onelens-agent"
  fullnameOverride: "onelens-agent"
  serviceAccount:
    enabled: true
    name: "onelens-agent-sa"
    annotations: {}
  storageClass:
    enabled: true  
    name: onelens-sc
    provisioner: ebs.csi.aws.com
    reclaimPolicy: Delete
    volumeBindingMode: WaitForFirstConsumer
    volumeType: gp3
    allowVolumeExpansion: true
    encryption:
      enabled: false
      kmsKeyId: ""
    volumeTags:
      enabled: true
      tags:
        Application_Name: "OnelensAgent"
        Application_Owner: "Astuto"
    labels:
      Application_Name: "OnelensAgent"
      Application_Owner: "Astuto"
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"
  # CronJob configuration
  cronJob:
    cronSchedule: "0 * * * *" # Run once an hour at the top of the hour
    concurrencyPolicy: "Forbid" # Prevent concurrent job executions
    successfulJobsHistoryLimit: 3 # Number of successful jobs to keep
    failedJobsHistoryLimit: 2 # Number of failed jobs to keep
    suspend: false # Suspend the job
    restartPolicy: "Never" # Restart the job on failure
    healthCheck: false # Set to true to enable health check for cronjob pod
    # Tolerations allow the agent to be scheduled on nodes with matching taints
    tolerations: []
    # - key: "key"
    #   operator: "Equal"
    #   value: "value"
    #   effect: "NoSchedule"
    nodeSelector: {}
    # kubernetes.io/os: linux
  # Environment variables
  env:
    # Health Checker URLs
    OPENCOST_HEALTH_CHECKER_URL: "http://onelens-agent-prometheus-opencost-exporter:9003/healthz"
    PROMETHEUS_HEALTH_CHECKER_URL: "http://onelens-agent-prometheus-server:80/-/healthy"
  secrets:
    # Secrets for onelens-agent
    API_BASE_URL: "https://dev-api.onelens.cloud" # DON'T ADD TRAILING SLASH
    CLUSTER_TOKEN: "your-raw-token" # Don't encode
    REGISTRATION_ID: "your-raw-id" # Don't encode
prometheus:
  enabled: true
  server:
    image:
      repository: quay.io/prometheus/prometheus
      tag: "v3.1.0"
      pullPolicy: IfNotPresent
    persistentVolume:
      enabled: false
      storageClass: onelens-sc
      accessModes:
        - ReadWriteOnce
      mountPath: /data
      size: 10Gi
      annotations:
        helm.sh/resource-policy: keep
    retention: "30d"
    retentionSize: "9GB"
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
                - localhost:9090
        - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https
        - job_name: 'kubernetes-nodes'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics
        - job_name: 'kubernetes-nodes-cadvisor'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        - job_name: 'kubernetes-service-endpoints'
          honor_labels: true
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_custom_metrics_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node
        - job_name: 'kubernetes-service-endpoints-slow'
          honor_labels: true
          scrape_interval: 5m
          scrape_timeout: 30s
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node
        - job_name: 'prometheus-pushgateway'
          honor_labels: true
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_custom_probe]
              action: keep
              regex: pushgateway
        - job_name: 'kubernetes-services'
          honor_labels: true
          metrics_path: /probe
          params:
            module: [http_2xx]
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_custom_probe]
              action: keep
              regex: true
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: service
        - job_name: 'kubernetes-pods'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_custom_metrics_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
              action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$2]:$1'
              target_label: __address__
  extraScrapeConfigs: |
    - job_name: opencost
      honor_labels: true
      scrape_interval: 1m
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      dns_sd_configs:
      - names:
        - onelens-agent-prometheus-opencost-exporter
        type: 'A'
        port: 9003
  alertmanager:
    enabled: false
  kube-state-metrics:
    enabled: true
    collectors:
      - cronjobs # Scheduled jobs that run at specified intervals
      - daemonsets # Ensures a pod runs on all (or some) nodes
      - deployments # Manages ReplicaSets and Pods
      - horizontalpodautoscalers # Automatically scales Pod replicas based on metrics
      - jobs # One-time tasks that run to completion
      - limitranges # Enforces resource limits in a namespace
      - namespaces # Virtual clusters within a physical cluster
      - nodes # Physical or virtual machines in the cluster
      - persistentvolumeclaims # Storage requests by Pods
      - persistentvolumes # Cluster storage resources
      - pods # Smallest deployable units in Kubernetes
      - replicasets # Maintains a stable set of replica Pods
      - resourcequotas # Limits aggregate resource consumption per namespace
      - statefulsets # Manages stateful applications
      - storageclasses # Defines different classes of storage
    # Comma-separated list of metrics to be exposed.
    # This list comprises of exact metric names and/or regex patterns.
    # The allowlist and denylist are mutually exclusive.
    metricAllowlist: []
    # Comma-separated list of metrics not to be enabled.
    # This list comprises of exact metric names and/or regex patterns.
    # The allowlist and denylist are mutually exclusive.
    metricDenylist: []
    service:
      annotations:
        custom.metrics/scrape: "true"
        prometheus.io/scrape: "false"
    metricLabelsAllowlist:
      - namespaces=[*]
      - pods=[*]
      - deployments=[*]
      - replicasets=[*]
      - daemonsets=[*]
      - statefulsets=[*]
      - cronjobs=[*]
      - jobs=[*]
      - horizontalpodautoscalers=[*]
      - limitranges=[*]
      - persistentvolumeclaims=[*]
      - storageclasses=[*]
      - nodes=[*]
      - resourcequotas=[*]
      - persistentvolumes=[*]
  prometheus-pushgateway:
    enabled: true
    serviceAnnotations:
      prometheus.io/probe: "false"
      prometheus.custom/probe: pushgateway
  prometheus-node-exporter:
    enabled: false
    nodeSelector:
      kubernetes.io/os: linux
    tolerations:
      - effect: NoSchedule
        operator: Exists
  kubernetes.io/os: linux
  global:
    scrape_interval: 30s
    scrape_timeout: 10s
    evaluation_interval: 1m
prometheus-opencost-exporter:
  enabled: true
  opencost:
    exporter:
      cloudProviderApiKey: ""
      defaultClusterId: 'default-cluster'
      image:
        registry: quay.io
        repository: kubecost1/kubecost-cost-model
        tag: ""
        pullPolicy: IfNotPresent
      replicas: 1
      resources:
        requests:
          cpu: '10m'
          memory: '55Mi'
        limits:
          cpu: '999m'
          memory: '1Gi'
      persistence:
        enabled: false
    prometheus:
      secret_name: ~
      username: ""
      username_key: DB_BASIC_AUTH_USERNAME
      password: ""
      password_key: DB_BASIC_AUTH_PW
      bearer_token: ""
      bearer_token_key: DB_BEARER_TOKEN
      external:
        enabled: false
        url: "https://prometheus-dev.onelens.cloud"
      internal:
        enabled: true
        serviceName: onelens-agent-prometheus-server
        namespaceName: onelens-agent
        port: 80
